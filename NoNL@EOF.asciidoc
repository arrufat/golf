= Handling of data with an unterminated last line

Some of the challenges on https://www.vimgolf.com[VimGolf] include input/output
data where the last line is not terminated with the newline character (LF on
Unix-like systems, CRLF on Windows). Such data go against POSIX, so are
uncommon on Linux, *BSD and macOS, which generally follow the POSIX standard.
Looks like the unofficial Python VimGolf client
https://github.com/dstein64/vimgolf/blob/master/vimgolf/vimgolf.py#L202[converts]
all such non-standard line endings to POSIX. And I have a hunch that the
official Ruby client probably
https://github.com/igrigorik/vimgolf/blob/master/lib/vimgolf/lib/vimgolf/challenge.rb#L61[does
this as well]. The link:vgdl.sh[] script here does the same when downloading
data from VimGolf: CRLF line endings are converted to LF, and if the last line
lacks LF it gets added. Otherwise, such challenges would be unsolvable by
Kakoune. While Vim has means of controlling its behaviour in respect to the
last line termination (`:se fixeol` starting from version 7.4.785, and `:se
bin` before that), Kakoune always terminates the unterminated last line on
save. Note that properly terminated data can be handled by Kakoune even if they
are terminated with CRLF. The script converts them as well only for the sake of
simplicity.

== Implications
This conversion affects a number of challenges. They can be classified as
follows.

=== Every line including the last one ends with CRLF
E.g. https://www.vimgolf.com/challenges/5fe3ddcb8a967b00099d7e59[RUST HTML to
maud]. As said above, strictly speaking such data don't have to be converted.
But converting them won't change anything either. Any given Kakoune solution
would work with the data both before and after conversion.

=== Every line but the last one ends with CRLF
Most affected challenges are in this category. The data probably originated on
Windows. The conversion makes them solvable by Kakoune, but otherwise they stay
the same.

=== Input and output data are just one line, unterminated
Probably originate on Windows as well. A degenerate case of the previous
category. E.g.
https://www.vimgolf.com/challenges/4d1a4f2ba860b744720000bf[Flodder-challenge],
https://www.vimgolf.com/challenges/544bcdd93cafc700021ee30e[learn vim in short
time], https://www.vimgolf.com/challenges/9v00647402cb000000000251[Surround z].

=== CR is significant as part of the challenge
There is one such challenge,
https://www.vimgolf.com/challenges/5301e83c0cb38c0002000008[Carriage return].
Luckily, those significant CR characters are never at the end of line, so they
are preserved by the conversion. Another challenge,
https://www.vimgolf.com/challenges/54bd44d755bd48000310c6e0[Greek column
realign], has CR in a comment that won't get touched by any solution. Removing
it won't affect anything. Besides, the said comment is addressed to Vim users
and not relevant to Kakoune.

=== Unix-style; in: terminated, out: unterminated
One challenge,
https://www.vimgolf.com/challenges/54a480bb5db1600002939b54[increment by column
in XML]. Did the challenge author expect the terminating NL character to be
explicitly removed from the last line? What for? Anyway, whatever the author
was thinking, their thought didn't brought fruits as VimGolf clients seem to
perform a similar conversion. A related case is
https://www.vimgolf.com/challenges/59e19a18396b000053000013[Converting group
lines from format A to Format B], only that there the conversion cannot
possibly affect the score.

=== Unix-style; in: unterminated, out: unterminated
All the Citizen Hacks '19 challenges plus
https://www.vimgolf.com/challenges/5ed1805d1e2d61000670078f[C# data class to F#
record] and https://www.vimgolf.com/challenges/5ed25358070f0e0006193c04[C#
function to F#]. No idea how such data came about. Were they originating on
Windows, then sloppily converted to Unix format? I.e. stripped of CR
characters, but the last line left unterminated? Anyway, I don't see how any
solution to them could be possibly affected by this conversion.

=== In: one line, unterminated. Out: multi-line, Unix-style, last line unterminated
There is only one challenge like this,
https://www.vimgolf.com/challenges/5123331bb2bc340002000003[Fibonacci
Trangles]. Probably, a degenerate case of the previous category.

=== In: DOS-style, terminated; out: Unix-style, terminated
https://www.vimgolf.com/challenges/9v00612800cb000000000210[Reordering Lorem
Ipsum]. The strangest and the most troublesome challenge of them all.
Differently to challenges above, this one is properly terminated. Was the
challenge author expecting `:se ff=unix<CR>` as part of the solution? That
would be `:set buffer eolformat lf<ret>` in Kakoune (or, using completion `:set
<tab> e<tab> lf<ret>)`. The challenge description is silent about this. And the
challenge is problematic in other ways as well, so I'm not going to provide a
solution anyway. In case somebody would like to solve it, we could adjust the
data manually like what was previously done with
https://www.vimgolf.com/challenges/5d745e799a72d600095eb7af[citizen_hacks_2019_part4].
I also strongly suspect that whatever the challenge author was planning could
not be realized as VimGolf clients would convert the data on the fly as well.
